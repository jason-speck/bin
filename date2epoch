#!/usr/bin/perl -w

use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
use Sys::Hostname;
use File::Basename;
use Time::Local;

my $options_ok = GetOptions ( 
	     #meta-options
             'help|h'           => sub { print_help_and_exit() },
             'usage|'          => sub { print_usage_and_exit() },
	   );

print_usage_and_die() if !$options_ok;
my $date=shift @ARGV || print_usage_and_die("missing date!");
my $epoch_date=convert_to_epoch($date);
print "$epoch_date\n";

sub convert_to_epoch {
  my $date=shift;
  my $format_ok=0;
  my ($month, $day, $year);

  #we can handle either yyyy/mm/dd or mm/dd/yyyy format
  if ( $date =~ /^(\d{4})[-\/](\d{1,2})[-\/](\d{1,2})$/ )
  {
    ( $year, $month, $day ) = (($1 - 1900), ($2 - 1), $3 );
    $format_ok=1;
  }
  elsif ($date =~ /^(\d{1,2})[-\/](\d{1,2})[-\/](\d{4})$/  ) {
    ( $month, $day, $year ) = (($1 - 1 ), $2 , ($3-1900) );
    $format_ok=1
  }

  #convert to epoch format

  if ( $format_ok==1 ) {
    my $epoch_date=(timelocal( 0, 0, 0, $day, $month, $year));
    return $epoch_date
  }
  else {
    fatal_error ("I don't understand the date format of $date!")
  }
}




sub print_help {
  my ( $message ) = @_;

  if ( defined ( $message ) && ! $message =~ m/^$/ ) {
    print $message . "\n";
    print "\n";
  }
  print "Usage:  " . basename($0)  .  "<date>\n";
  print <<EOM
Recognized date formats:
  YYYY-MM-DD
  YYYY/MM/DD
Options:
  --usage                    show usage information
  --help                     show this message
EOM
;
}


sub print_help_and_exit {
  print_help(@_);
  exit 0;
}
  
sub print_usage_and_exit {
  print_usage(@_);
  exit 0;
}

sub print_usage_and_die {
  print_usage(@_);
  exit 1;
}

sub print_usage {
  print_help(@_);
}



